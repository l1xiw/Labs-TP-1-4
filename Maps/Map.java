package Maps;

import Players.Bot;
import Players.Character;
import java.util.Random;
import java.util.Scanner;

public class Map {
    private Cell[][] massmap; // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Å —é–Ω–∏—Ç–∞–º–∏)
    private Cell[][] stock;   // –ë–∞–∑–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç (–±–µ–∑ —é–Ω–∏—Ç–æ–≤)
    private int xx;
    private int yy;
    private Character character;
    private Bot bot;
    private Random random;
    private String p;
    private String b;

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–º–∫–æ–≤
    private int playerCastleX, playerCastleY;
    private int enemyCastleX, enemyCastleY;

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    public Map() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã (X Y):");
        this.xx = scanner.nextInt();
        this.yy = scanner.nextInt();
        this.massmap = new Cell[xx][yy];
        this.stock = new Cell[xx][yy];
        this.random = new Random();
        initializeEmptyMap();
        generateStockCopy();
        runForestEditor(scanner);
        runRoadEditor(scanner);
        placeCastles(scanner);
        validateMapFullness(scanner);
        placeUnitsNearCastles();
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    // –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ Map –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    public Map(int xx, int yy,  String[][] cellTypes, String [][] stockCellTypes) {
        this.xx = xx;
        this.yy = yy;
        this.massmap = new Cell[xx][yy];
        this.stock = new Cell[xx][yy];
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                String cell = stockCellTypes[x][y];
                /*if (cell.equals("ü§ñ")) {
                    stock[x][y] = new Cell("-"); // ‚Üê –û—á–∏—â–∞–µ–º stock –æ—Ç –±–æ—Ç–∞
                } else {
                    stock[x][y] = new Cell(cell);
                }*/
                massmap[x][y] = new Cell(cellTypes[x][y]);
            }
        }
        for(int x = 0; x < xx; x++){
            for(int y = 0; y < yy; y++){
                stock[x][y]=new Cell(stockCellTypes[x][y]);
            }
        }
        restoreCastlesAndUnits(); // ‚Üê –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–º–∫–∏ –∏ –≥–µ—Ä–æ—è
    }
    private void generateStockCopy(){
        for(int x = 0; x < xx; x++){
            for( int y = 0; y < yy; y++){
                stock[x][y] = new Cell(massmap[x][y].getCelltype());
            }
        }
    }
    /*public Map(int xx, int yy, String[][] cellTypes) {
        this.xx = xx;
        this.yy = yy;
        this.massmap = new Cell[xx][yy];
        this.stock = new Cell[xx][yy];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è stock (–±–∞–∑–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç)
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                String cell = cellTypes[x][y];
                stock[x][y] = new Cell(cell); //.equals("ü¶∏") || cell.equals("ü§ñ") ? "-" : cell);
                massmap[x][y] = new Cell(cell); // massmap —Å–æ–¥–µ—Ä–∂–∏—Ç —é–Ω–∏—Ç–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            }
        }

        restoreCastlesAndUnits(); // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–∫–æ–≤, –≥–µ—Ä–æ—è –∏ –±–æ—Ç–∞
    }*/

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–π –∫–∞—Ä—Ç—ã
    private void initializeEmptyMap() {
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                massmap[x][y] = new Cell("-");
                stock[x][y] = new Cell("-");
            }
        }
    }

    public Cell[][] getStock() {
        return stock;
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—Å–∞
    private void runForestEditor(Scanner scanner) {
        boolean editing = true;
        while (editing) {
            displayMap();
            System.out.println("\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—Å–∞:");
            System.out.println("1. –¢–æ—á–∫–∞\n2. –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫\n3. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫\n4. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—Å–∞");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> placeSingleTree(scanner);
                case 2 -> placeRectangle(scanner);
                case 3 -> placeTriangle(scanner);
                case 4 -> editing = false;
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
            }
        }
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    private void placeSingleTree(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ (X Y):");
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        if (isValidCoordinate(x, y)) {
            massmap[x][y].setCelltype("\uD83C\uDF33");
            stock[x][y].setCelltype("\uD83C\uDF33");
        }
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ª–µ—Å–∞
    private void placeRectangle(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X1 Y1):");
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X2 Y2):");
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        for (int x = Math.min(x1, x2); x <= Math.max(x1, x2); x++) {
            for (int y = Math.min(y1, y2); y <= Math.max(y1, y2); y++) {
                if (isValidCoordinate(x, y)) {
                    massmap[x][y].setCelltype("\uD83C\uDF33");
                    stock[x][y].setCelltype("\uD83C\uDF33");
                }
            }
        }
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ª–µ—Å–∞
    private void placeTriangle(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω–∏—è (X1 Y1):");
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω—ã (X2 Y2):");
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        int minX = Math.min(x1, x2);
        int maxX = Math.max(x1, x2);
        int minY = Math.min(y1, y2);
        int maxY = Math.max(y1, y2);

        for (int x = minX; x <= maxX; x++) {
            for (int y = minY; y <= maxY - (maxX - x); y++) {
                if (isValidCoordinate(x, y)) {
                    massmap[x][y].setCelltype("\uD83C\uDF33");
                    stock[x][y].setCelltype("\uD83C\uDF33");
                }
            }
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–≥
    private void runRoadEditor(Scanner scanner) {
        boolean editing = true;
        while (editing) {
            displayMap();
            System.out.println("\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–≥–∏:");
            System.out.println("1. –ü—Ä—è–º–∞—è\n2. –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è\n3. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–≥–∏");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> createStraightRoad(scanner);
                case 2 -> createDiagonalRoad(scanner);
                case 3 -> editing = false;
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –¥–æ—Ä–æ–≥–∏
    private void createStraightRoad(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Ä–æ–≥–∏ (X1 Y1):");
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Ä–æ–≥–∏ (X2 Y2):");
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        if (x1 == x2 || y1 == y2) {
            for (int x = Math.min(x1, x2); x <= Math.max(x1, x2); x++) {
                for (int y = Math.min(y1, y2); y <= Math.max(y1, y2); y++) {
                    if (isValidCoordinate(x, y)) {
                        massmap[x][y].setCelltype("\uD83D\uDCC9");
                        stock[x][y].setCelltype("\uD83D\uDCC9");
                    }
                }
            }
        } else {
            System.out.println("–û—à–∏–±–∫–∞: –¥–ª—è –ø—Ä—è–º–æ–π –¥–æ—Ä–æ–≥–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π.");
        }
    }

    // –í –∫–ª–∞—Å—Å–µ Map.java
    public void Removeunit() {
        if (bot != null) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ massmap
            int botX = bot.getX();
            int botY = bot.getY();
            if (isValidCoordinate(botX, botY)) {
                massmap[botX][botY].setCelltype(stock[botX][botY].getCelltype());
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ stock (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Ç–∞–º –ø–æ –æ—à–∏–±–∫–µ)
            if (isValidCoordinate(botX, botY)) {
                stock[botX][botY].setCelltype(stock[botX][botY].getCelltype()); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∞–Ω–¥—à–∞—Ñ—Ç
            }

            bot = null; // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–≥–∏
    private void createDiagonalRoad(Scanner scanner) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Ä–æ–≥–∏ (X1 Y1):");
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Ä–æ–≥–∏ (X2 Y2):");
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        int dx = Integer.compare(x2, x1);
        int dy = Integer.compare(y2, y1);

        for (int x = x1, y = y1;
             x != x2 + dx && y != y2 + dy;
             x += dx, y += dy) {
            if (isValidCoordinate(x, y)) {
                massmap[x][y].setCelltype("\uD83D\uDCC9");
                stock[x][y].setCelltype("\uD83D\uDCC9");
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
    private void validateMapFullness(Scanner scanner) {
        while (!isMapFilled()) {
            System.out.println("–ù–∞ –∫–∞—Ä—Ç–µ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.");
            runForestEditor(scanner);
            runRoadEditor(scanner);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞
    private boolean isMapFilled() {
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                if (massmap[x][y].getCelltype().equals("-")) {
                    return false;
                }
            }
        }
        return true;
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–º–∫–æ–≤
    private void placeCastles(Scanner scanner) {
        System.out.println("–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∑–∞–º–æ–∫ –∏–≥—Ä–æ–∫–∞ (X Y):");
        playerCastleX = scanner.nextInt();
        playerCastleY = scanner.nextInt();
        placeCastle(playerCastleX, playerCastleY, "\uD83C\uDFF0");

        System.out.println("–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∑–∞–º–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (X Y):");
        enemyCastleX = scanner.nextInt();
        enemyCastleY = scanner.nextInt();
        placeCastle(enemyCastleX, enemyCastleY, "\uD83C\uDFEF");
        generateStockCopy();
        for(int x = 0; x < xx; x++){
            for(int y = 0; y < yy; y++){
                stock[x][y].setCelltype(massmap[x][y].getCelltype());
            }
        }
        generateStockCopy();
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–º–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    private void placeCastle(int x, int y, String symbol) {
        if (isValidCoordinate(x, y)) {
            massmap[x][y].setCelltype(symbol);
            stock[x][y].setCelltype(symbol);
        }
    }


    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ —é–Ω–∏—Ç–æ–≤ —Ä—è–¥–æ–º —Å –∑–∞–º–∫–∞–º–∏
    private void placeUnitsNearCastles() {
        placeCharacterNearCastle(playerCastleX, playerCastleY);
        placeBotNearCastle(enemyCastleX, enemyCastleY);
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥–µ—Ä–æ—è —Ä—è–¥–æ–º —Å –∑–∞–º–∫–æ–º –∏–≥—Ä–æ–∫–∞
    private void placeCharacterNearCastle(int castleX, int castleY) {
        int unitX = castleX;
        int unitY = castleY + 1; // –°–ø—Ä–∞–≤–∞ –æ—Ç –∑–∞–º–∫–∞

        if (!isValidCoordinate(unitX, unitY)) {
            unitX = castleX + 1; // –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–µ–ª—å–∑—è, —Ç–æ –Ω–∏–∂–µ
            unitY = castleY;
        }

        if (isValidCoordinate(unitX, unitY)) {
            character = new Character(unitX, unitY);
            massmap[unitX][unitY].setCelltype("ü¶∏");
        }
    }

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Ä—è–¥–æ–º —Å –∑–∞–º–∫–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    private void placeBotNearCastle(int castleX, int castleY) {
        int unitX = castleX;
        int unitY = castleY - 1; // –°–ª–µ–≤–∞ –æ—Ç –∑–∞–º–∫–∞

        if (!isValidCoordinate(unitX, unitY)) {
            unitX = castleX - 1; // –ï—Å–ª–∏ —Å–ª–µ–≤–∞ –Ω–µ–ª—å–∑—è, —Ç–æ –≤—ã—à–µ
            unitY = castleY;
        }

        if (isValidCoordinate(unitX, unitY)) {
            bot = new Bot(unitX, unitY);
            massmap[unitX][unitY].setCelltype("ü§ñ");
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–∫–æ–≤ –∏ —é–Ω–∏—Ç–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    private void restoreCastlesAndUnits() {
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                String cell = massmap[x][y].getCelltype();
                if (cell.equals("\uD83C\uDFF0")) { // –ó–∞–º–æ–∫ –∏–≥—Ä–æ–∫–∞
                    playerCastleX = x;
                    playerCastleY = y;
                }
                if (cell.equals("\uD83C\uDFEF")) { // –ó–∞–º–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                    enemyCastleX = x;
                    enemyCastleY = y;
                }
                if (cell.equals("ü¶∏")) { // –ì–µ—Ä–æ–π
                    character = new Character(x, y);
                }
                if (cell.equals("ü§ñ")) { // –ë–æ—Ç
                    bot = new Bot(x, y);
                }
            }
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    public void displayMap() {
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                if (massmap[x][y].getCelltype() == "ü§ñ" && bot == null){
                    String cell2 = stock[x][y].getCelltype();
                    System.out.print("[ " + cell2 + " ] ");
                }
                if (massmap[x][y].getCelltype()=="-"){
                    System.out.print("[ " + stock[x][y].getCelltype() + " ] ");
                }
                else {
                    String cell = massmap[x][y].getCelltype();
                    System.out.print("[ " + cell + " ] ");
                }
            }
            System.out.println();
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    private boolean isValidCoordinate(int x, int y) {
        return x >= 0 && x < xx && y >= 0 && y < yy;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
    public void updateMap(Character hero, Bot bot) {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        if (hero != null && isValidCoordinate(hero.getPreviousX(), hero.getPreviousY())) {
            massmap[hero.getPreviousX()][hero.getPreviousY()].setCelltype(stock[hero.getPreviousX()][hero.getPreviousY()].getCelltype());
        }
        if (bot != null && isValidCoordinate(bot.getPreviousX(), bot.getPreviousY())) {
            massmap[bot.getPreviousX()][bot.getPreviousY()].setCelltype(stock[bot.getPreviousX()][bot.getPreviousY()].getCelltype());
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if (hero != null && isValidCoordinate(hero.getX(), hero.getY())) {
            massmap[hero.getX()][hero.getY()].setCelltype("ü¶∏");
        }
        if (bot != null && isValidCoordinate(bot.getX(), bot.getY())) {
            massmap[bot.getX()][bot.getY()].setCelltype("ü§ñ");
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≥–µ—Ä–æ—è –∏ –±–æ—Ç–∞
    public void setCharacter(Character character) {
        this.character = character;
        updateMap(character, bot);
    }

    public void setBot(Bot bot) {
        this.bot = bot;
        updateMap(character, bot);
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–º–∫–æ–≤
    public int getPlayerCastleX() { return playerCastleX; }
    public int getPlayerCastleY() { return playerCastleY; }
    public int getEnemyCastleX() { return enemyCastleX; }
    public int getEnemyCastleY() { return enemyCastleY; }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≥–µ—Ä–æ—è –∏ –±–æ—Ç–∞
    public Character getCharacter() { return character; }
    public Bot getBot() { return bot; }

    // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    public String getCellType(int x, int y) {
        return isValidCoordinate(x, y) ? massmap[x][y].getCelltype() : "";
    }

    // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    public String getStockCellType(int x, int y) {
        return isValidCoordinate(x, y) ? stock[x][y].getCelltype() : "";
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫ –∫–∞—Ä—Ç—ã
    public String[][] getCellTypes() {
        String[][] cellTypes = new String[xx][yy];
        for (int x = 0; x < xx; x++) {
            for (int y = 0; y < yy; y++) {
                cellTypes[x][y] = massmap[x][y].getCelltype();
            }
        }
        return cellTypes;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞


    public int getXX() { return xx; }
    public int getYY() { return yy; }
}

