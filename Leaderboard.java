import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class Leaderboard {
    private static final String LEADERBOARD_FILE = "saves/rating.txt";
    private static Map<String, Integer> ratings = new HashMap<>();

    static {
        loadLeaderboard();
    }

    private static void loadLeaderboard() {
        try (BufferedReader reader = new BufferedReader(new FileReader(LEADERBOARD_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 2) {
                    ratings.put(parts[0], Integer.parseInt(parts[1]));
                }
            }
        } catch (IOException e) {
            saveLeaderboard(); // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        }
    }

    public static void saveLeaderboard() {
        try (FileWriter writer = new FileWriter(LEADERBOARD_FILE)) {
            for (Map.Entry<String, Integer> entry : ratings.entrySet()) {
                writer.write(entry.getKey() + ":" + entry.getValue() + "\n");
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: " + e.getMessage());
        }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥: —Ä–µ–π—Ç–∏–Ω–≥ = 100 - –æ—á–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—à–µ
    public static void addRating(String playerName, int earnedPoints) {
        int newRating =  earnedPoints; // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        Integer existingRating = ratings.get(playerName);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—à–µ
        if (existingRating == null || newRating > existingRating) {
            ratings.put(playerName, newRating);
            saveLeaderboard();
        }
    }

    public static void showLeaderboard() {
        System.out.println("\nüèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:");
        ratings.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> System.out.println(entry.getKey() + ": " + entry.getValue()));
    }
}